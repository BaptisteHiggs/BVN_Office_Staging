"""
This script takes the relevant svg code from the file generated by illustrator and places it inside the index.html file.
"""

def extractCode(filePath, groupNames):
    """
    Extract the relevant svg code from the file generated by illustrator, returning it as a list of lines.

    filePath should be the path needed to get to the file as a string (e.g. "masterfloorplan.svg").
    groupNames should be the ids of every important tag as a list of strings (e.g. ["clippaths", "Zones", "Background"]).
    """
    # Initialising list of lines to be returned
    relevantCode = []

    # Copying is true when inside an important group (styleCopy is true when copying the style)
    copying = False
    styleCopy = False

    # List of opening group tags that want to be copied
    groupTags = []
    for name in groupNames:
        groupTags.append('<g id="' + name + '">') 

    # Loop through each line of the svg file.
    with open(filePath) as infile:
        for line in infile:
            if not copying:
                # Check for line being an important group's opening
                if line.strip() in groupTags:
                    copying = True
                    innerGroupCount = 0
                    relevantCode.append(line)

                # Check for opening of style                
                elif line.strip() == '<style type="text/css">':
                    copying = True
                    styleCopy = True
                    relevantCode.append(line)

            else:
                # Check for if copying the style
                if styleCopy:
                    if line.strip() == "</style>":
                        styleCopy = False
                        copying = False

                # Check for inner group opening
                elif line.strip()[:2] == "<g":
                    innerGroupCount += 1
                
                # Check for closing of group tag
                elif line.strip()[:3] == "</g":
                    # Check for the actual group closing
                    if innerGroupCount == 0:
                        copying = False
                    else:
                        innerGroupCount -= 1
                
                # Read line in
                relevantCode.append(line)

    cleanerCode = []
    for line in relevantCode:
        # Note: Each backslash has to be written twice to represent one backslash, i.e. print "\\" => \
        # removalText = "\\\\syd-file\\practice\\Baptiste\\BVN_Office_Staging\\"

        # Removes the class that makes all of one layer invisible
        if line.strip() != ".st0{display:none;}":

            # Removing the context that's present in some paths to linked images
            cleanerCode.append(removeText(line, "\\\\syd-file\\practice\\Baptiste\\BVN_Office_Staging\\"))

    return cleanerCode


def removeText(text, subtextToRemove):
    """
    Clean up a string by removing a substring if it is found
    """
    # Character to search for
    firstChar = subtextToRemove[0]

    # Initialising list of start positions of the text that needs to be removed
    subtextStarts = []
    # Looping through each character
    for charPosition in range(len(text)):
        # Testing against char
        if text[charPosition] == firstChar:
            # Try is necessary as it's possible it will be searching for a larger subtext than exists
            try:
                # Testing for subtext's presence
                if text[charPosition:charPosition+len(subtextToRemove)] == subtextToRemove:
                    print "wow"
                    subtextStarts.append(charPosition)
            except IndexError:
                # Do nothing
                print("An IndexError occured, don't worry about it.")
            except Exception:
                print Exception

    # Removing the subtext(s)
    count = 0
    print subtextStarts
    while count < len(subtextStarts):
        # Removing the text
        print text + "\n\n\n"
        text = text[:subtextStarts[count]] + text[subtextStarts[count]+len(subtextToRemove):]
        print "\n\n\n" + text
        # Incrementing the count
        count += 1

        # Moving each position down relative to the reduction of text
        subtextStarts = [x-len(subtextToRemove) for x in subtextStarts]

    return text


def insertCode(filePath, newSVG):
    """
    Insert the SVG code into the html file.

    filePath should be the path needed to get to the file as a string (e.g. "index.html").
    newSVG should be the code extracted by extractCode() and should be a list of strings (each correlating to one line).

    Does not return anything (the file is updated).
    """
    # This is the line that starts the svg off in the html file.
    svgStartMarker = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1380 1080">'
    
    # Initialising list of lines
    htmlCode = []

    # Initialising pasting variable (True when putting the code in)
    pasting = False

    with open(filePath) as infile:
        for line in infile:
            if pasting:
                if line.strip() == "</svg>":
                    # Stopping the pasting
                    pasting = False

                    # Placing the svg code inside the html code
                    htmlCode.extend(newSVG)

                    # Closing the svg element
                    htmlCode.append(line)
                
                # Note: It does nothing when the line isn't "</svg>".
                # This is effectively just deleting the old svg code.
            
            else:
                # First checking for whether it should start pasting
                if line.strip() == svgStartMarker:
                    pasting = True
                
                # When not pasting, it's copying.
                htmlCode.append(line)
    
    # Initialising output file
    outputFile = open(filePath, 'w')

    # Rewrite the file with the updated SVG
    for line in htmlCode:
        outputFile.write(line)


def runSVGPrep():
    """
    Run the other functions & ask for appropriate user input to prep the files.
    """
    # Extracting the new SVG
    inFile = raw_input("What's the name of svg file generated by illustrator? ")
    newSVG = extractCode(inFile, ["clippaths", "Zones", "Background"])

    # Writing the updated html
    outFile = raw_input("What's the name of html file that needs to be updated? ")
    insertCode(outFile, newSVG)

    # Finished!
    end = raw_input("Press enter to exit.")


runSVGPrep()

"""
outputFile = open('output.svg', 'w+')

for line in extractCode("MFPT.svg", ["clippaths", "Zones"]):
    outputFile.write(line)

outputFile.close()

end = raw_input("Press enter to exit.")
"""